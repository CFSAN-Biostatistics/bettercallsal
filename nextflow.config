def fs = File.separator
def pd = "${projectDir}"

// Global parameters
includeConfig "${pd}${fs}conf${fs}manifest.config"
includeConfig "${pd}${fs}conf${fs}base.config"

// Include FASTQ config to prepare for a case when the entry point is 
// FASTQ metadata CSV or FASTQ input directory
includeConfig "${pd}${fs}conf${fs}fastq.config"

if (params.pipeline != null) {
    try {
        includeConfig "${params.workflowsconf}${fs}${params.pipeline}.config"
    } catch (Exception e) {
        System.err.println('-'.multiply(params.linewidth) + "\n" +
            "\033[0;31m${params.cfsanpipename} - ERROR\033[0m\n" +
            '-'.multiply(params.linewidth) + "\n" + "\033[0;31mCould not load " +
            "default pipeline configuration. Please provide a pipeline \n" +
            "name using the --pipeline option.\n\033[0m" + '-'.multiply(params.linewidth) + "\n")
        System.exit(1)
    }
}

// Include modules' config last.
includeConfig "${pd}${fs}conf${fs}logtheseparams.config"
includeConfig "${pd}${fs}conf${fs}modules.config"

// Nextflow runtime profiles
conda.cacheDir = "${pd}${fs}kondagac_cache"
singularity.cacheDir = "${pd}${fs}cingularitygac_cache"

profiles {
    includeConfig "${pd}${fs}conf${fs}computeinfra.config"
}
